# libreray download if not already done
if (!require(rsconnect)) {
install.packages('rsconnect')
require(rsconnect)
}
if (!require(shiny)) {
install.packages('shiny')
require(shiny)
}
if (!require(DT)) {
install.packages('DT')
require(DT)
}
if (!require(shinyjs)) {
install.packages('shinyjs')
require(shinyjs)
}
# call library
library(shiny)
library(rsconnect)
library(tidyr)
library(recommenderlab)
library(shinyjs)
#Def functions
top5recom = function (recommendation, limit = 6){
for (i in 1:length(recommendation)){
a=1
stop = 1
y = artists$charid[artists$charid %in% recommendation[[i]]]
recommendation[[i]] = 0
while (a < limit){
if (!is.na(y[a])){
recommendation[[i]] = append(recommendation[[i]],y[a],after=1)
a = 1 + a
}
}
}
return(recommendation)
}
# mes identifients
rsconnect::setAccountInfo(name='antoinebimont',
token='49EE54847B3C96C225E811C483E08706',
secret='u/5oPm+T1EVccOkuSzML+n88O+pnwb1N166sAKou')
#rsconnect::deployApp('C:/Users/angel/Desktop/Projet R shiny')
# Load data
artists <- read.table("artists_gp1.dat", sep="\t", stringsAsFactors=FALSE, comment.char="", quote="", header=TRUE)
user_artists <- read.table("user_artists_gp1.dat", sep="\t", header=TRUE)
# Data transformation
user_artists_wide <- spread(user_artists, key=artistID, value=weight)
artists$charid <- paste0("I", artists$id)
userids <- user_artists_wide$userID
user_artists_wide$IuserID <- NULL
rownames(user_artists_wide) <- paste0("U", userids)
colnames(user_artists_wide) <- paste0("I", colnames(user_artists_wide))
#list_id <- as.list(rownames(user_artists_wide))
visits_byitem <- colSums(user_artists_wide[, -1], na.rm=TRUE)
visits_1k <- user_artists_wide[, order(visits_byitem, decreasing=TRUE)[1:4000]]
num_visits <- apply(visits_1k, 1, function(x) sum(!is.na(x)))
visits_1k <- visits_1k[num_visits > 10, ]
visits_1k <- t(scale(t(visits_1k))[, ])
##dim(visits_1k)
list_id <- as.list(rownames(visits_1k))[1472:1660]
set.seed(100)
# Convert visits_1k into a recommenderlab sparse matrix
visits_1k_rrm <- as(as.matrix(visits_1k), "realRatingMatrix")
### POPULAR RECOMENDATAION
# Create recommender from the first 1472 users
rr_pop <- Recommender(visits_1k_rrm[1:1472], method = "POPULAR")
recom_pop <- predict(rr_pop, visits_1k_rrm[1472:1660], n = 10)
Myrecommendations_pop <- as(recom_pop, "list")
Myrecommendations_pop = top5recom(Myrecommendations_pop)
### UBCF RECOMENDATAION
# Create recommender from the first 1472 users
rr_UBCF <- Recommender(visits_1k_rrm[1:1472], method = "UBCF")
recom_UBCF <- predict(rr_pop, visits_1k_rrm[1472:1660], n = 10)
Myrecommendations_UBCF <- as(recom_UBCF, "list")
Myrecommendations_UBCF = top5recom(Myrecommendations_UBCF)
### ALS RECOMENDATAION
# Create recommender from the first 1472 users
rr_als <- Recommender(visits_1k_rrm[1:1472], method = "ALS")
recom_als <- predict(rr_als, visits_1k_rrm[1472:1660], n = 10)
Myrecommendations_als <- as(recom_als, "list")
Myrecommendations_als = top5recom(Myrecommendations_als)
names(Myrecommendations_als) = rownames(visits_1k)[1472:1660]
### Random RECOMENDATAION
# Create recommender from the first 1472 users
rr_random <- Recommender(visits_1k_rrm[1:1472], method = "Random")
recom_random <- predict(rr_random, visits_1k_rrm[1472:1660], n = 50)
Myrecommendations_random <- as(recom_random, "list")
Myrecommendations_random = top5recom(Myrecommendations_random)
names(Myrecommendations_random) = rownames(visits_1k)[1472:1660]
### Listened to Artists
user_row = setNames(as(visits_1k_rrm,'list')[1472:1660], rownames(visits_1k)[1472:1660])
for (i in 1:length(user_row)){
user_row[[i]] = sort(user_row[[i]], decreasing=TRUE)
user_row[[i]] = rownames(as.data.frame(user_row[[i]]))
}
# UI
source('ui1.R')
# Server
source('server5.R')
# Run the app
shinyApp(ui, server)
# libreray download if not already done
if (!require(rsconnect)) {
install.packages('rsconnect')
require(rsconnect)
}
if (!require(shiny)) {
install.packages('shiny')
require(shiny)
}
if (!require(DT)) {
install.packages('DT')
require(DT)
}
if (!require(shinyjs)) {
install.packages('shinyjs')
require(shinyjs)
}
# call library
library(shiny)
library(rsconnect)
library(tidyr)
library(recommenderlab)
library(shinyjs)
#Def functions
top5recom = function (recommendation, limit = 6){
for (i in 1:length(recommendation)){
a=1
stop = 1
y = artists$charid[artists$charid %in% recommendation[[i]]]
recommendation[[i]] = 0
while (a < limit){
if (!is.na(y[a])){
recommendation[[i]] = append(recommendation[[i]],y[a],after=1)
a = 1 + a
}
}
}
return(recommendation)
}
# mes identifients
rsconnect::setAccountInfo(name='antoinebimont',
token='49EE54847B3C96C225E811C483E08706',
secret='u/5oPm+T1EVccOkuSzML+n88O+pnwb1N166sAKou')
#rsconnect::deployApp('C:/Users/angel/Desktop/Projet R shiny')
# Load data
artists <- read.table("artists_gp1.dat", sep="\t", stringsAsFactors=FALSE, comment.char="", quote="", header=TRUE)
user_artists <- read.table("user_artists_gp1.dat", sep="\t", header=TRUE)
write.csv(user_artists,"user_artists_gp1.csv")
write.csv(artists,"artists_gp1.csv")
# Data transformation
user_artists_wide <- spread(user_artists, key=artistID, value=weight)
artists$charid <- paste0("I", artists$id)
userids <- user_artists_wide$userID
user_artists_wide$IuserID <- NULL
rownames(user_artists_wide) <- paste0("U", userids)
colnames(user_artists_wide) <- paste0("I", colnames(user_artists_wide))
#list_id <- as.list(rownames(user_artists_wide))
visits_byitem <- colSums(user_artists_wide[, -1], na.rm=TRUE)
visits_1k <- user_artists_wide[, order(visits_byitem, decreasing=TRUE)[1:4000]]
num_visits <- apply(visits_1k, 1, function(x) sum(!is.na(x)))
visits_1k <- visits_1k[num_visits > 10, ]
visits_1k <- t(scale(t(visits_1k))[, ])
##dim(visits_1k)
list_id <- as.list(rownames(visits_1k))[1472:1660]
set.seed(100)
# Convert visits_1k into a recommenderlab sparse matrix
visits_1k_rrm <- as(as.matrix(visits_1k), "realRatingMatrix")
### POPULAR RECOMENDATAION
# Create recommender from the first 1472 users
rr_pop <- Recommender(visits_1k_rrm[1:1472], method = "POPULAR")
recom_pop <- predict(rr_pop, visits_1k_rrm[1472:1660], n = 10)
Myrecommendations_pop <- as(recom_pop, "list")
Myrecommendations_pop = top5recom(Myrecommendations_pop)
### UBCF RECOMENDATAION
# Create recommender from the first 1472 users
rr_UBCF <- Recommender(visits_1k_rrm[1:1472], method = "UBCF")
recom_UBCF <- predict(rr_pop, visits_1k_rrm[1472:1660], n = 10)
Myrecommendations_UBCF <- as(recom_UBCF, "list")
Myrecommendations_UBCF = top5recom(Myrecommendations_UBCF)
### ALS RECOMENDATAION
# Create recommender from the first 1472 users
rr_als <- Recommender(visits_1k_rrm[1:1472], method = "ALS")
recom_als <- predict(rr_als, visits_1k_rrm[1472:1660], n = 10)
Myrecommendations_als <- as(recom_als, "list")
Myrecommendations_als = top5recom(Myrecommendations_als)
names(Myrecommendations_als) = rownames(visits_1k)[1472:1660]
### Random RECOMENDATAION
# Create recommender from the first 1472 users
rr_random <- Recommender(visits_1k_rrm[1:1472], method = "Random")
recom_random <- predict(rr_random, visits_1k_rrm[1472:1660], n = 50)
Myrecommendations_random <- as(recom_random, "list")
Myrecommendations_random = top5recom(Myrecommendations_random)
names(Myrecommendations_random) = rownames(visits_1k)[1472:1660]
### Listened to Artists
user_row = setNames(as(visits_1k_rrm,'list')[1472:1660], rownames(visits_1k)[1472:1660])
for (i in 1:length(user_row)){
user_row[[i]] = sort(user_row[[i]], decreasing=TRUE)
user_row[[i]] = rownames(as.data.frame(user_row[[i]]))
}
# UI
source('ui1.R')
# Server
source('server5.R')
# Run the app
shinyApp(ui, server)
require("ggplot2")
library("ggplot2")
### NOT NECESARRY TO RUN THE OUTPUT IS IN THE CSV FILE "GGPLOT ROC CURVE DATA.CSV"
# scheme <- evaluationScheme(visits_1k_rrm, method="cross", k=4, given=3, goodRating=3)
# scheme
#
# algorithms <- list(`random items` = list(name = "RANDOM", param = NULL), `popular items` = list(name = "POPULAR", param = NULL), `user-based CF` = list(name = "UBCF", param = list(nn = 3)), `ALs-based CF` = list(name = "ALS", param = NULL))
#
# # Use the created evaluation scheme to evaluate the recommender method popular.
# # We evaluate top-1, top-3, top-5, top-10, top-15 and top-20 recommendation lists
# results <- evaluate(scheme, algorithms, type = "topNList",
#                     n=c(1,3,5,10,15,20))
# results
# write.csv2(avg(results),"GGPLOT ROC CURVE DATA.csv")
#### START FROM HERE AFTER YOU RUN CODE IN MyApp Final Version 3
df =  read.csv2("GGPLOT ROC CURVE DATA.csv")
# user_artists_bis$TF2 = c('')
#
# ggplot(user_artists_bis,aes(x = TF2, fill = TF)) +
#   geom_bar(position = "fill", stat = 'count')+
#   scale_y_continuous(breaks = seq(0,1,0.2))+
#   labs (title = 'Distribution of known and unknown artists', x =NULL)
conf_ma = df
conf_ma_df = data.frame(conf_ma)
ggplot(conf_ma_df)+
geom_line(aes(x = random.items.FPR, y = random.items.TPR,color = 'Random'))+
geom_line(aes(x = popular.items.FPR, y = popular.items.TPR, color = 'Popular'))+
geom_line(aes(x = user.based.CF.FPR, y = user.based.CF.TPR, color = 'UBCF'))+
geom_line(aes(x = ALs.based.CF.FPR, y = ALs.based.CF.TPR, color = 'ALS'))+
geom_point(aes(x = random.items.FPR, y = random.items.TPR,color = 'Random'))+
geom_point(aes(x = popular.items.FPR, y = popular.items.TPR, color = 'Popular'))+
geom_point(aes(x = user.based.CF.FPR, y = user.based.CF.TPR, color = 'UBCF'))+
geom_point(aes(x = ALs.based.CF.FPR, y = ALs.based.CF.TPR, color = 'ALS'))+
scale_color_manual(name='Legend',
breaks=c('Random', 'Popular', 'UBCF','ALS'),
values=c('Random'='black', 'Popular'='red', 'UBCF'='green','ALS'='blue'))+
labs(title ='ROC curve', x = "False Positive Rate", y = "True Positive Rate")+
scale_y_continuous(limits = c(0,0.4),breaks = seq(0,0.4,0.1))
ggplot(user_artists_bis) +
stat_count(aes(x =   geom = "bar",))+
require("ggplot2")
library("ggplot2")
### NOT NECESARRY TO RUN THE OUTPUT IS IN THE CSV FILE "GGPLOT ROC CURVE DATA.CSV"
# scheme <- evaluationScheme(visits_1k_rrm, method="cross", k=4, given=3, goodRating=3)
# scheme
#
# algorithms <- list(`random items` = list(name = "RANDOM", param = NULL), `popular items` = list(name = "POPULAR", param = NULL), `user-based CF` = list(name = "UBCF", param = list(nn = 3)), `ALs-based CF` = list(name = "ALS", param = NULL))
#
# # Use the created evaluation scheme to evaluate the recommender method popular.
# # We evaluate top-1, top-3, top-5, top-10, top-15 and top-20 recommendation lists
# results <- evaluate(scheme, algorithms, type = "topNList",
#                     n=c(1,3,5,10,15,20))
# results
# write.csv2(avg(results),"GGPLOT ROC CURVE DATA.csv")
#### START FROM HERE AFTER YOU RUN CODE IN MyApp Final Version 3
df =  read.csv2("GGPLOT ROC CURVE DATA.csv")
# user_artists_bis$TF2 = c('')
#
# ggplot(user_artists_bis,aes(x = TF2, fill = TF)) +
#   geom_bar(position = "fill", stat = 'count')+
#   scale_y_continuous(breaks = seq(0,1,0.2))+
#   labs (title = 'Distribution of known and unknown artists', x =NULL)
conf_ma = df
conf_ma_df = data.frame(conf_ma)
ggplot(conf_ma_df)+
geom_line(aes(x = random.items.FPR, y = random.items.TPR,color = 'Random'))+
geom_line(aes(x = popular.items.FPR, y = popular.items.TPR, color = 'Popular'))+
geom_line(aes(x = user.based.CF.FPR, y = user.based.CF.TPR, color = 'UBCF'))+
geom_line(aes(x = ALs.based.CF.FPR, y = ALs.based.CF.TPR, color = 'ALS'))+
geom_point(aes(x = random.items.FPR, y = random.items.TPR,color = 'Random'))+
geom_point(aes(x = popular.items.FPR, y = popular.items.TPR, color = 'Popular'))+
geom_point(aes(x = user.based.CF.FPR, y = user.based.CF.TPR, color = 'UBCF'))+
geom_point(aes(x = ALs.based.CF.FPR, y = ALs.based.CF.TPR, color = 'ALS'))+
scale_color_manual(name='Legend',
breaks=c('Random', 'Popular', 'UBCF','ALS'),
values=c('Random'='black', 'Popular'='red', 'UBCF'='green','ALS'='blue'))+
labs(title ='ROC curve', x = "False Positive Rate", y = "True Positive Rate")+
scale_y_continuous(limits = c(0,0.4),breaks = seq(0,0.4,0.1))
ggplot(user_artists_bis) +
stat_count(aes(x =   geom = "bar",))+
df =  read.csv2("GGPLOT ROC CURVE DATA.csv")
conf_ma = df
conf_ma_df = data.frame(conf_ma)
ggplot(conf_ma_df)+
geom_line(aes(x = random.items.FPR, y = random.items.TPR,color = 'Random'))+
geom_line(aes(x = popular.items.FPR, y = popular.items.TPR, color = 'Popular'))+
geom_line(aes(x = user.based.CF.FPR, y = user.based.CF.TPR, color = 'UBCF'))+
geom_line(aes(x = ALs.based.CF.FPR, y = ALs.based.CF.TPR, color = 'ALS'))+
geom_point(aes(x = random.items.FPR, y = random.items.TPR,color = 'Random'))+
geom_point(aes(x = popular.items.FPR, y = popular.items.TPR, color = 'Popular'))+
geom_point(aes(x = user.based.CF.FPR, y = user.based.CF.TPR, color = 'UBCF'))+
geom_point(aes(x = ALs.based.CF.FPR, y = ALs.based.CF.TPR, color = 'ALS'))+
scale_color_manual(name='Legend',
breaks=c('Random', 'Popular', 'UBCF','ALS'),
values=c('Random'='black', 'Popular'='red', 'UBCF'='green','ALS'='blue'))+
labs(title ='ROC curve', x = "False Positive Rate", y = "True Positive Rate")+
scale_y_continuous(limits = c(0,0.4),breaks = seq(0,0.4,0.1))
ggplot(user_artists_bis) +
stat_count(aes(x =   geom = "bar",))+
ggplot(conf_ma_df)+
geom_line(aes(x = random.items.recall, y = random.items.precision,color = 'Random'))+
geom_line(aes(x = popular.items.recall, y = popular.items.precision, color = 'Popular'))+
geom_line(aes(x = user.based.CF.recall, y = user.based.CF.precision, color = 'UBCF'))+
geom_line(aes(x = ALs.based.CF.recall, y = ALs.based.CF.precision, color = 'ALS'))+
geom_point(aes(x = random.items.recall, y = random.items.precision,color = 'Random'))+
geom_point(aes(x = popular.items.recall, y = popular.items.precision, color = 'Popular'))+
geom_point(aes(x = user.based.CF.recall, y = user.based.CF.precision, color = 'UBCF'))+
geom_point(aes(x = ALs.based.CF.recall, y = ALs.based.CF.precision, color = 'ALS'))+
scale_color_manual(name='Legend',
breaks=c('Random', 'Popular', 'UBCF','ALS'),
values=c('Random'='black', 'Popular'='red', 'UBCF'='green','ALS'='blue'))+
labs(title ='Recall/Precision', x = "Recall", y = "Precision")+
scale_y_continuous(limits = c(0,0.035),breaks = seq(0,0.035,0.01))
label = c("14.6%","85.4%")
data <- data.frame(
category=c('Unknown Artists','Known Artists'),
count=c(1759,10271)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n ", label)
label1 <- c(7404,42596)
data$label1 <- c(7404,42596)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
# geom_text( x=1, aes(y=labelPosition, label=label1, color = category), size=5)+
geom_text( x=0.5, aes(y=labelPosition, label=label, color = category), size=4.8) +
scale_fill_manual(values = c('grey70','firebrick3'))+
scale_color_manual(values = c('grey40','firebrick3'))+
# scale_fill_brewer(palette= "Accent") +
# scale_color_brewer(palette ="Set1")+
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")+
labs(title = 'Distribution of known and unknown artists',subtitle = 'Out of 12 030 listened artists')
